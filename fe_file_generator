import numpy as np
from copy import deepcopy
from scipy import spatial
import io

# Generate seed points for a cubic grid
def generate_cube_seeds(number_cells_x, number_cells_y, number_cells_z, standard_deviation=0, spatial_step=1):
    grid_values = ([[(i + np.random.normal(0, standard_deviation)) * spatial_step,
                     (j + np.random.normal(0, standard_deviation)) * spatial_step,
                     (k + np.random.normal(0, standard_deviation)) * spatial_step]
                    for k in range(number_cells_z)
                    for j in range(number_cells_y)
                    for i in range(number_cells_x)])
    unique_grid_values = [list(x) for x in set(tuple(x) for x in grid_values)]
    return unique_grid_values

# Get vertex number, adding to the dictionary if necessary
def get_vertex_number(vertex, vertices):
    if vertex in vertices.values():
        vertex_number = list(vertices.keys())[list(vertices.values()).index(vertex)]
    else:
        vertex_number = max(vertices.keys(), default=0) + 1
        vertices[vertex_number] = vertex
    return vertex_number

# Get edge number, adding to the dictionary if necessary
def get_enum(edge, edges):
    if edge in edges.values():
        enum = list(edges.keys())[list(edges.values()).index(edge)]
    elif edge[::-1] in edges.values():
        enum = -list(edges.keys())[list(edges.values()).index(edge[::-1])]
    else:
        enum = max(edges.keys(), default=0) + 1
        edges[enum] = [edge[0], edge[1]]
    return enum

# Calculate the area of a cell given its vertices
def get_cell_area(cell_vertices, vertices):
    x = [vertices[i][0] for i in cell_vertices]
    y = [vertices[i][1] for i in cell_vertices]
    return 0.5 * (np.dot(x, np.roll(y, 1)) - np.dot(y, np.roll(x, 1)))

# Remove infinite regions from the tessellation
def remove_infinite_regions(regions, tessellation, max_distance=50):
    to_delete = []
    for c in regions:
        distances = []
        if len(c) != 0 and -1 not in c:
            for ii in range(len(c) - 1):
                distances.append(np.linalg.norm(tessellation.vertices[c[ii]] - tessellation.vertices[c[ii + 1]]))
            if np.any(np.array(distances) > max_distance):
                to_delete.append(c)
    for c in to_delete:
        regions.remove(c)
    return regions

# Get the sign of the area of a cell
def get_cell_area_sign(cell, all_vertices):
    return int(np.sign(get_cell_area(cell, all_vertices)))

# Create lattice elements (vertices, edges, cells) from a Voronoi tessellation
def create_lattice_elements(tessellation):
    new_vertices = {}
    new_cells = {}
    new_edges = {}
    regions = remove_infinite_regions(deepcopy(tessellation.regions), tessellation)
    cnum = 1

    for c in regions:
        temp_for_cell = []
        temp_vertex_for_cell = []
        if len(c) != 0 and -1 not in c:
            if c[0] != c[-1]:
                c.append(c[0])
            for ii in range(len(c) - 1):
                new_edge_vertices = np.around(np.linspace(tessellation.vertices[c[ii]], tessellation.vertices[c[ii + 1]], 2), 3).tolist()
                for v0, v1 in zip(new_edge_vertices[:-1], new_edge_vertices[1:]):
                    vertex_number_1 = get_vertex_number(tuple(v0), new_vertices)
                    vertex_number_2 = get_vertex_number(tuple(v1), new_vertices)
                    enum = get_enum([vertex_number_1, vertex_number_2], new_edges)
                    temp_for_cell.append(enum)
                    temp_vertex_for_cell.append(vertex_number_1)
                    temp_vertex_for_cell.append(vertex_number_2)
            area_sign = get_cell_area_sign(temp_vertex_for_cell, new_vertices)
            new_cells[-cnum * area_sign] = temp_for_cell
            cnum += 1

    return new_vertices, new_edges, new_cells, regions

# Generate a Voronoi tessellation from seed values
def generate_voronoi_tessellation(seed_values):
    tessellation = spatial.Voronoi(list(seed_values))
    return tessellation

# Create an example lattice with given parameters
def create_example_lattice(number_cells_x, number_cells_y, number_cells_z, voronoi_seeds_std=0.15, voronoi_seeds_step=20):
    seed_values = generate_cube_seeds(number_cells_x, number_cells_y, number_cells_z, standard_deviation=0, spatial_step=voronoi_seeds_step)
    tessellation = generate_voronoi_tessellation(seed_values)
    vertices, edges, cells, regions = create_lattice_elements(tessellation)
    return vertices, edges, cells, regions, tessellation

# Generate edges from faces
def generate_edges_from_faces(faces):
    edges = {}
    edge_num = 1
    for i in faces:
        for ii in range(len(i)):
            v0, v1 = i[ii], i[(ii + 1) % len(i)]
            if (v0, v1) not in edges.values() and (v1, v0) not in edges.values():
                edges[edge_num] = (v0, v1)
                edge_num += 1
    return edges

# Adjust face indices to start from 1 instead of 0
def adjust_faces_indices(faces):
    return [[vertex + 1 for vertex in face] for face in faces]

# Generate edges and edge-faces relationships from vertices
def generate_edges_and_faces_from_vertices(faces):
    edges = {}
    edge_map = {}
    edge_num = 1
    edge_faces = []

    for face in faces:
        edge_face = []
        for ii in range(len(face)):
            v0 = face[ii]
            v1 = face[(ii + 1) % len(face)]
            edge = (v0, v1) if v0 < v1 else (v1, v0)
            if edge not in edge_map:
                edges[edge_num] = edge
                edge_map[edge] = edge_num
                edge_map[(edge[1], edge[0])] = -edge_num
                edge_num += 1
            edge_face.append(edge_map[(v0, v1)])
        edge_faces.append(edge_face)

    return edges, edge_faces

# Find faces for a given set of vertices
def find_faces_for_vertices(vertices, faces_by_vertices):
    vertices_set = set(vertices)
    found_faces = []
    for face in faces_by_vertices:
        face_set = set(face)
        if face_set.issubset(vertices_set):
            found_faces.append(face_index_map[tuple(sorted(face))])
    return found_faces

# Class for generating a Surface Evolver file
class SurfaceEvolver:
    def __init__(self, vertices, edges, adjust_faces, cells, density_values, volume_values, polygonal=True):
        self.vertices = vertices
        self.edges = edges
        self.faces = adjust_faces
        self.cells = cells
        self.density_values = {tuple(map(tuple, np.round(np.array(key), 3))): round(value, 3) for key, value in density_values.items()}
        self.volume_values = volume_values
        self.polygonal = polygonal
        self.fe_file = io.StringIO()

    def generate_fe_file(self):
        self.fe_file.write("SPACE_DIMENSION 3 \n")
        self.fe_file.write("SCALE 0.005 FIXED\n")
        self.fe_file.write("STRING \n")
        self.fe_file.write("\n")

        # Write vertices
        self.fe_file.write("vertices \n")
        for k, v in self.vertices.items():
            self.fe_file.write(f"{k} {v[0]} {v[1]} {v[2]} \n")
        self.fe_file.write("\n")

        # Write edges
        self.fe_file.write("edges \n")
        for k, v in self.edges.items():
            self.fe_file.write(f"{k} {v[0]} {v[1]} \n")
        self.fe_file.write("\n")

        # Write faces
        self.fe_file.write("faces \n")
        for i, face in enumerate(self.faces):
            self.fe_file.write(f"{i + 1} {' '.join(map(str, face))} \n")
        self.fe_file.write("\n")

        # Write bodies
        self.fe_file.write("bodies \n")
        for k, v in enumerate(self.cells.values()):
            str_value = " ".join(str(vv) for vv in v)
            self.fe_file.write(f"{abs(k + 1)} {str_value} \n")
        self.fe_file.write("\n")

        # Additional commands
        self.fe_file.write("read \n \n")
        self.fe_file.write("show_all_edges off \n")
        self.fe_file.write("metric_conversion off \n")
        self.fe_file.write("autorecalc on \n")
        self.fe_file.write("gv_binary off \n")
        self.fe_file.write("gravity off \n")
        self.fe_file.write("ii := 0; \n")

        return self.fe_file

    def save_fe_file(self, file_name: str):
        self.fe_file.write('q; \n')
        with open(f'{file_name}', mode='w') as f:
            print(self.fe_file.getvalue(), file=f)
        return True

# Main script to generate and save a Surface Evolver file
if __name__ == "__main__":
    vertices, edges, cells, regions, tessellation = create_example_lattice(4, 4, 4, 0, 20)

    print("Regions in main:", regions)
    print("Vertices in main:", vertices)
    print("Edges in main:", edges)
    print("Cells in main:", cells)

    faces = deepcopy(tessellation.ridge_vertices)
    faces = [face for face in faces if -1 not in face]

    print("Faces in main:", faces)

    adjust_faces = adjust_faces_indices(faces)
    edges, edge_faces = generate_edges_and_faces_from_vertices(adjust_faces)

    print("Adjusted Faces:", adjust_faces)
    print("Faces by edges:", edge_faces)

    file = SurfaceEvolver(vertices, edges, edge_faces, cells, {}, {}, polygonal=False)
    input_path = r"C:\Users\takeoff\Desktop\GRINDING\4Cube_test_v3.fe"
    file.generate_fe_file()
    file.save_fe_file(input_path)
