import numpy as np
from copy import deepcopy
from scipy import spatial
import io

def generate_cube_seeds(number_cells_x, number_cells_y, number_cells_z, standard_deviation=0, spatial_step=1):
    grid_values = ([[(i + np.random.normal(0, standard_deviation)) * spatial_step,
                    (j + np.random.normal(0, standard_deviation)) * spatial_step,
                    (k + np.random.normal(0, standard_deviation)) * spatial_step]
                  for k in range(number_cells_z)
                  for j in range(number_cells_y)
                  for i in range(number_cells_x)])
    unique_grid_values = [list(x) for x in set(tuple(x) for x in grid_values)]
    return unique_grid_values

def get_vertex_number(vertex, vertices):
    if vertex in vertices.values():
        vertex_number = list(vertices.keys())[list(vertices.values()).index(vertex)]
    else:
        if len(vertices) > 0:
            vertex_number = max(vertices.keys()) + 1
        else:
            vertex_number = 1
        vertices[vertex_number] = vertex
    return vertex_number

def get_enum(edge, edges):
    if edge in edges.values():
        enum = list(edges.keys())[list(edges.values()).index(edge)]
    elif edge[::-1] in edges.values():
        enum = - list(edges.keys())[list(edges.values()).index(edge[::-1])]
    else:
        if len(edges) > 0:
            enum = max(edges.keys()) + 1
        else:
            enum = 1
        edges[enum] = [edge[0], edge[1]]
    return enum

def get_cell_area(cell_vertices, vertices):
    x = [vertices[i][0] for i in cell_vertices]
    y = [vertices[i][1] for i in cell_vertices]
    return 0.5 * (np.dot(x, np.roll(y, 1)) - np.dot(y, np.roll(x, 1)))

def remove_infinite_regions(regions, tessellation, max_distance=50):
    to_delete = []
    for c in regions:
        distances = []
        if len(c) != 0 and -1 not in c:
            for ii in range(0, len(c) - 1):
                distances.append(
                    np.linalg.norm(tessellation.vertices[c[ii]] - tessellation.vertices[c[ii + 1]]))
            distances = np.array(distances)
            if np.any(np.where(distances > max_distance, True, False)):
                to_delete.append(c)
    for c in to_delete:
        regions.remove(c)
    return regions

def get_cell_area_sign(cell, all_vertices):
    return int(np.sign(get_cell_area(cell, all_vertices)))

def create_lattice_elements(tessellation):
    new_vertices = {}
    new_cells = {}
    new_edges = {}
    regions = deepcopy(tessellation.regions)
    regions = remove_infinite_regions(regions, tessellation)
    cnum = 1
    for c in regions:
        temp_for_cell = []
        temp_vertex_for_cell = []
        if len(c) != 0 and -1 not in c:
            if c[0] != c[-1]:
                c.append(c[0])
            for ii in range(0, len(c) - 1):
                new_edge_vertices = [
                    (round(tessellation.vertices[c[ii]][0], 3), round(tessellation.vertices[c[ii + 1]][0], 3)),
                    (round(tessellation.vertices[c[ii]][1], 3), round(tessellation.vertices[c[ii + 1]][1], 3)),
                    (round(tessellation.vertices[c[ii]][2], 3), round(tessellation.vertices[c[ii + 1]][2], 3))
                ]
                for v in range(0, len(new_edge_vertices) - 1):
                    v0 = new_edge_vertices[v]
                    v1 = new_edge_vertices[v + 1]
                    vertex_number_1 = get_vertex_number(v0, new_vertices)
                    vertex_number_2 = get_vertex_number(v1, new_vertices)
                    enum = get_enum([vertex_number_1, vertex_number_2], new_edges)
                    temp_for_cell.append(enum)
                    temp_vertex_for_cell.append(vertex_number_1)
                    temp_vertex_for_cell.append(vertex_number_2)
            area_sign = get_cell_area_sign(temp_vertex_for_cell, new_vertices)
            new_cells[-1 * cnum * area_sign] = temp_for_cell
            cnum += 1
    return new_vertices, new_edges, new_cells, regions

def generate_voronoi_tessellation(seed_values: list) -> object:
    tessellation = spatial.Voronoi(list(seed_values))
    return tessellation

def create_example_lattice(number_cells_x, number_cells_y, number_cells_z, voronoi_seeds_std=0.15, voronoi_seeds_step=20):
    seed_values = generate_cube_seeds(number_cells_x, number_cells_y, number_cells_z, standard_deviation=voronoi_seeds_std, spatial_step=voronoi_seeds_step)
    tessellation = generate_voronoi_tessellation(seed_values)
    vertices, edges, cells, regions = create_lattice_elements(tessellation)
    return vertices, edges, cells, regions, tessellation

# 生成Voronoi结构
vertices, edges, cells, regions, tessellation = create_example_lattice(4, 4, 4, 0, 20)

# 处理faces
faces = deepcopy(tessellation.ridge_vertices)
for i in tessellation.ridge_vertices:
    if -1 in i:
        faces.remove(i)

def adjust_faces_indices(faces):
    adjusted_faces = []
    for face in faces:
        adjusted_face = [vertex + 1 for vertex in face]
        adjusted_faces.append(adjusted_face)
    return adjusted_faces

adjust_faces = adjust_faces_indices(faces)

def generate_edges_and_faces_from_vertices(faces):
    edges = {}
    edge_map = {}
    edge_num = 1
    edge_faces = []

    for face in faces:
        edge_face = []
        for ii in range(len(face)):
            v0 = face[ii]
            v1 = face[(ii + 1) % len(face)]

            edge = (v0, v1) if v0 < v1 else (v1, v0)
            if edge not in edge_map:
                edges[edge_num] = edge
                edge_map[edge] = edge_num
                edge_map[(edge[1], edge[0])] = -edge_num
                edge_num += 1

            edge_face.append(edge_map[(v0, v1)])
        edge_faces.append(edge_face)

    return edges, edge_faces

edges, edge_faces = generate_edges_and_faces_from_vertices(adjust_faces)

filtered_regions = [[vertex + 1 for vertex in region] for region in tessellation.regions if -1 not in region]
face_index_map = {tuple(sorted(face)): i + 1 for i, face in enumerate(adjust_faces)}

def find_faces_for_vertices(vertices, faces_by_vertices):
    vertices_set = set(vertices)
    found_faces = []
    for face in faces_by_vertices:
        face_set = set(face)
        if face_set.issubset(vertices_set):
            found_faces.append(face_index_map[tuple(sorted(face))])
    return found_faces

regions_by_faces = []
for region in filtered_regions:
    faces = find_faces_for_vertices(region, adjust_faces)
    regions_by_faces.append(faces)

class SurfaceEvolver:
    def __init__(self, vertices, edges, faces, cells, density_values, volume_values, polygonal=True):
        self.vertices = vertices
        self.edges = edges
        self.faces = faces
        self.cells = cells
        self.density_values = {tuple(map(tuple, np.round(np.array(key), 3))): round(value, 3) for key, value in density_values.items()}
        self.volume_values = volume_values
        self.polygonal = polygonal
        self.fe_file = io.StringIO()

    def generate_fe_file(self):
        self.fe_file.write("SPACE_DIMENSION 3 \n")
        self.fe_file.write("SCALE 0.005 FIXED\n")
        self.fe_file.write("STRING \n")
        self.fe_file.write("\n")
        self.fe_file.write("vertices \n")

        for k, v in self.vertices.items():
            self.fe_file.write(f"{k} {v[0]} {v[1]} {v[2]} \n")
        self.fe_file.write("\n")

        self.fe_file.write("edges \n")
        for k, v in self.edges.items():
            self.fe_file.write(f"{k} {v[0]} {v[1]} \n")
        self.fe_file.write("\n")

        self.fe_file.write("faces \n")
        for k, v in self.faces.items():
            self.fe_file.write(f"{k} {' '.join(map(str, v))} \n")
        self.fe_file.write("\n")

        self.fe_file.write("bodies \n")
        for k, v in self.cells.items():
            self.fe_file.write(f"{k} {' '.join(map(str, v))} \n")
        self.fe_file.write("\n")

density_values = {}  # 你可以在这里定义密度值
volume_values = {}  # 你可以在这里定义体积值

surface_evolver = SurfaceEvolver(vertices, edges, {i + 1: face for i, face in enumerate(edge_faces)}, {i + 1: region for i, region in enumerate(regions_by_faces)}, density_values, volume_values)
surface_evolver.generate_fe_file()
print(surface_evolver.fe_file.getvalue())
